generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/hr-client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("HR_DATABASE_URL")
}

model Company {
  id                      String          @id @default(cuid())
  name                    String
  address                 String?
  city                    String?
  postalCode              String?
  country                 String          @default("Netherlands")
  phone                   String?
  email                   String?
  website                 String?
  kvkNumber               String?
  taxNumber               String?
  vatNumber               String?
  bankAccount             String?
  contactEmail            String?
  contactPhone            String?
  description             String?
  industry                String?
  foundedYear             Int?
  employeeCount           Int?
  // HR-specific settings
  workingHoursPerWeek     Float           @default(40)
  holidayAllowancePercentage Float        @default(8.33)
  probationPeriodMonths   Int             @default(2)
  noticePeriodDays        Int             @default(30)
  annualLeaveEntitlement  Int             @default(25)
  sickLeavePolicy         String          @default("STATUTORY")
  
  // Dutch payroll compliance (company-level)
  payrollTaxNumber        String?         // Company's loonheffingennummer
  pensionScheme           String?         // Company pension scheme
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  // Relations
  employees               Employee[]
  departments             Department[]
  positions               Position[]
  leaveTypes              LeaveType[]
  leaveRequests           LeaveRequest[]
  timeEntries             TimeEntry[]
  employeeHistories       EmployeeHistory[]
  performanceReviews      PerformanceReview[]
  contracts               Contract[]

}

model Employee {
  id               String          @id @default(cuid())
  employeeNumber   String
  firstName        String
  lastName         String
  email            String?
  phone            String?
  streetName       String?
  houseNumber      String?
  houseNumberAddition String?
  city             String?
  postalCode       String?
  country          String          @default("Netherlands")
  nationality      String          @default("Dutch")
  bsn              String
  dateOfBirth      DateTime
  startDate        DateTime
  endDate          DateTime?
  probationEndDate DateTime?
  position         String
  department       String?
  employmentType   String
  contractType     String
  workingHours     Float           @default(40)
   // Salary information
  salary          Float?
  salaryType      String?         @default("monthly") // "monthly" or "hourly"
  hourlyRate      Float?
  
  // Dutch payroll compliance fields (individual-level only)
  taxTable        String?         @default("wit") // Individual tax table: "wit" (standard) or "groen" (reduced)
  taxCredit       Float?          @default(0) // Individual tax credit amount
  isDGA           Boolean         @default(false) // Individual Director-major shareholder status
  bankAccount      String?
  bankName         String?
  emergencyContact String?
  emergencyPhone   String?
  emergencyRelation String?
  isActive         Boolean         @default(true)
  createdBy        String?
  companyId        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  LeaveRequest     LeaveRequest[]
  TimeEntry        TimeEntry[]
  EmployeeHistory  EmployeeHistory[]
  Company          Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contracts        Contract[]
  portalAccessStatus String          @default("NO_ACCESS") // e.g., "NO_ACCESS", "INVITED", "ACTIVE"
  invitedAt        DateTime?
  documents        Document[]

  @@unique([companyId, bsn])
  @@unique([companyId, employeeNumber])
}

model Department {
  id          String   @id @default(cuid())
  name        String
  description String?
  managerId   String?
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
}

model Position {
  id          String   @id @default(cuid())
  title       String
  description String?
  department  String?
  level       String?
  companyId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, title])
}

model LeaveType {
  id           String         @id @default(cuid())
  name         String
  code         String
  description  String?
  isPaid       Boolean        @default(true)
  maxDaysPerYear Int?
  carryOverDays Int           @default(0)
  companyId    String
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  LeaveRequest LeaveRequest[]
  Company      Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, name])
}

model LeaveRequest {
  id          String    @id @default(cuid())
  employeeId  String
  leaveTypeId String
  startDate   DateTime
  endDate     DateTime
  days        Float
  reason      String?
  status      String    @default("pending")
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  LeaveType   LeaveType @relation(fields: [leaveTypeId], references: [id])
  Company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model TimeEntry {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  hoursWorked Float
  description String?
  projectCode String?
  isApproved  Boolean  @default(false)
  approvedBy  String?
  approvedAt  DateTime?
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  Company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model EmployeeHistory {
  id          String   @id @default(cuid())
  employeeId  String
  changeType  String
  fieldName   String
  oldValue    String?
  newValue    String?
  changedBy   String
  reason      String?
  companyId   String
  createdAt   DateTime @default(now())
  Employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  Company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model PerformanceReview {
  id             String   @id @default(cuid())
  employeeId     String
  reviewPeriod   String
  overallRating  Float
  goals          String?
  achievements   String?
  areasForImprovement String?
  reviewerComments String?
  employeeComments String?
  reviewDate     DateTime
  reviewerId     String
  companyId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}


model Contract {
  id                String   @id @default(cuid())
  employeeId        String
  contractType      String   // "employment", "amendment", "termination", etc.
  title             String
  description       String?
  fileName          String
  filePath          String
  fileSize          Int?
  mimeType          String?
  status            String   @default("pending") // "pending", "signed", "expired", "cancelled"
  signedAt          DateTime?
  signedBy          String?  // Employee ID who signed
  signatureData     String?  // Base64 encoded signature or signature metadata
  expiresAt         DateTime?
  isActive          Boolean  @default(true)
  // Working schedule fields
  workingHoursPerWeek Float?  // Override company default working hours
  workingDaysPerWeek  Float?  // Number of working days per week (e.g., 5.0, 4.5, 3.0)
  workSchedule        String? // Working schedule description (e.g., "Monday-Friday", "Flexible")
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  Company           Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}



model Document {
  id          String      @id @default(cuid())
  employeeId  String
  documentType DocumentType
  fileName    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  status      DocumentStatus @default(PENDING)
  uploadedAt  DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?
  notes       String?
  
  // Relations
  employee    Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  
  @@map("documents")
}

enum DocumentType {
  ID_BEWIJS
  LOONBELASTINGVERKLARING
  CONTRACT
  PASSPORT
  DRIVERS_LICENSE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

