generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Company {
  id            String          @id
  name          String
  address       String?
  city          String?
  postalCode    String?
  country       String          @default("Netherlands")
  phone         String?
  email         String?
  website       String?
  kvkNumber     String?
  taxNumber     String?
  vatNumber     String?
  bankAccount   String?
  contactEmail  String?
  contactPhone  String?
  description   String?
  industry      String?
  foundedYear   Int?
  employeeCount Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Employee      Employee[]
  PayrollRecord PayrollRecord[]
  Subscription  Subscription?
  TaxSettings   TaxSettings[]
  TenantConfig  TenantConfig?
  User          User[]
  UserCompany   UserCompany[]
}

model Employee {
  id               String          @id
  employeeNumber   String
  firstName        String
  lastName         String
  email            String?
  phone            String?
  address          String?
  city             String?
  postalCode       String?
  bsn              String
  dateOfBirth      DateTime
  startDate        DateTime
  endDate          DateTime?
  position         String
  department       String?
  employmentType   String
  salary           Float
  taxTable         String
  isActive         Boolean         @default(true)
  bankAccount      String?
  emergencyContact String?
  emergencyPhone   String?
  companyId        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  Company          Company         @relation(fields: [companyId], references: [id])
  PayrollRecord    PayrollRecord[]

  @@unique([companyId, bsn])
  @@unique([companyId, employeeNumber])
}

model PayrollRecord {
  id               String   @id
  employeeId       String
  companyId        String
  payPeriodStart   DateTime
  payPeriodEnd     DateTime
  processedDate    DateTime @default(now())
  baseSalary       Float
  hoursWorked      Float    @default(0)
  overtimeHours    Float    @default(0)
  overtimeRate     Float    @default(1.5)
  regularPay       Float
  overtimePay      Float
  holidayAllowance Float    @default(0)
  grossPay         Float
  incomeTax        Float
  aowContribution  Float
  wlzContribution  Float
  wwContribution   Float
  wiaContribution  Float
  totalDeductions  Float
  netPay           Float
  taxTable         String
  taxYear          Int
  payslipGenerated Boolean  @default(false)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  Company          Company  @relation(fields: [companyId], references: [id])
  Employee         Employee @relation(fields: [employeeId], references: [id])
}

model Plan {
  id              String         @id
  name            String
  stripePriceId   String?
  maxEmployees    Int?
  maxPayrolls     Int?
  features        Json
  price           Float
  currency        String         @default("EUR")
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  stripeProductId String?
  Subscription    Subscription[]
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id
  companyId            String    @unique
  planId               String
  status               String
  stripeSubscriptionId String?
  stripeCustomerId     String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  trialEnd             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  Company              Company   @relation(fields: [companyId], references: [id])
  Plan                 Plan      @relation(fields: [planId], references: [id])
}

model TaxSettings {
  id                   String   @id
  companyId            String
  taxYear              Int
  incomeTaxRate1       Float    @default(36.93)
  incomeTaxRate2       Float    @default(49.50)
  incomeTaxBracket1Max Float    @default(75518)
  aowRate              Float    @default(17.90)
  wlzRate              Float    @default(9.65)
  wwRate               Float    @default(2.70)
  wiaRate              Float    @default(0.60)
  aowMaxBase           Float    @default(40000)
  wlzMaxBase           Float    @default(40000)
  wwMaxBase            Float    @default(69000)
  wiaMaxBase           Float    @default(69000)
  holidayAllowanceRate Float    @default(8.0)
  minimumWage          Float    @default(12.83)
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  Company              Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, taxYear])
}

model TenantConfig {
  id            String   @id
  companyId     String   @unique
  settings      Json     @default("{}")
  limits        Json     @default("{}")
  features      Json     @default("{}")
  customization Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String        @default("admin")
  companyId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Account       Account[]
  Session       Session[]
  Company       Company?      @relation(fields: [companyId], references: [id])
  UserCompany   UserCompany[]
}

model UserCompany {
  id        String   @id
  userId    String
  companyId String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
