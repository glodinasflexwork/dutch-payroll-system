// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("admin") // Global role, will be deprecated in favor of UserCompany roles
  companyId     String?   // Legacy field - keeping for backward compatibility during migration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  company       Company?     @relation(fields: [companyId], references: [id]) // Legacy relationship
  companies     UserCompany[] // New multi-tenant relationship
  
  // Payroll approval relations
  payrollApprovalsSubmitted PayrollApproval[] @relation("PayrollApprovalSubmittedBy")
  payrollApprovalsReviewed  PayrollApproval[] @relation("PayrollApprovalReviewedBy")
  payrollApprovalsApproved  PayrollApproval[] @relation("PayrollApprovalApprovedBy")
  payrollApprovalsFinalized PayrollApproval[] @relation("PayrollApprovalFinalizedBy")
  payrollApprovalHistory    PayrollApprovalHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                String   @id @default(cuid())
  name              String
  address           String?
  city              String?
  postalCode        String?
  country           String   @default("Netherlands")
  phone             String?  // Company phone number
  email             String?  // Company email
  website           String?  // Company website
  kvkNumber         String?  // Chamber of Commerce number
  taxNumber         String?  // Tax identification number (Loonheffingsnummer)
  vatNumber         String?  // VAT number (BTW nummer)
  bankAccount       String?
  contactEmail      String?  // Legacy field - keeping for compatibility
  contactPhone      String?  // Legacy field - keeping for compatibility
  description       String?  // Company description
  industry          String?  // Industry/sector
  foundedYear       Int?     // Year company was founded
  employeeCount     Int?     // Number of employees
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users             User[]        // Legacy relationship
  userCompanies     UserCompany[] // New multi-tenant relationship
  employees         Employee[]
  payrollRecords    PayrollRecord[]
  payrollApprovals  PayrollApproval[]
  employeeAllowances EmployeeAllowance[]
  employeeDeductions EmployeeDeduction[]
  taxSettings       TaxSettings[]
  subscription      Subscription? // One-to-one relationship with subscription
  tenantConfig      TenantConfig? // One-to-one relationship with tenant config
}

model Employee {
  id                String   @id @default(cuid())
  employeeNumber    String   // Company-specific employee number
  
  // Personal Information
  firstName         String
  lastName          String
  email             String?
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  country           String   @default("Netherlands")
  
  // Dutch-specific identifiers
  bsn               String   // Burgerservicenummer (Dutch social security number)
  nationality       String   @default("Dutch")
  
  // Employment Information
  dateOfBirth       DateTime
  startDate         DateTime
  endDate           DateTime?
  probationEndDate  DateTime? // Proeftijd
  position          String
  department        String?
  
  // Contract Information
  employmentType    String   // "permanent", "temporary", "freelance", "intern"
  contractType      String   // "fulltime", "parttime", "zero_hours"
  workingHours      Float    @default(40) // Hours per week
  workingDays       Float    @default(5)  // Days per week
  
  // Salary Information
  salary            Float    // Monthly gross salary
  salaryType        String   @default("monthly") // "monthly", "hourly", "annual"
  hourlyRate        Float?   // For hourly employees
  
  // Dutch Tax Information
  taxTable          String   // "wit" (white) or "groen" (green)
  taxCredit         Float    @default(0) // Heffingskorting
  payrollTaxNumber  String?  // Loonheffingsnummer
  
  // Benefits and Allowances
  holidayAllowance  Float    @default(8.33) // Vakantiegeld percentage
  holidayDays       Int      @default(25)   // Vacation days per year
  pensionScheme     String?  // Pension scheme type
  
  // Banking Information
  bankAccount       String?  // IBAN
  bankName          String?
  
  // Emergency Contact
  emergencyContact  String?
  emergencyPhone    String?
  emergencyRelation String?
  
  // Employment Status
  isActive          Boolean  @default(true)
  isDGA             Boolean  @default(false) // Directeur-grootaandeelhouder
  
  // System fields
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?  // User who created the employee
  
  // Relations
  company           Company @relation(fields: [companyId], references: [id])
  payrollRecords    PayrollRecord[]
  employeeAllowances EmployeeAllowance[]
  employeeDeductions EmployeeDeduction[]
  
  // Compound unique constraints for per-company uniqueness
  @@unique([companyId, employeeNumber])
  @@unique([companyId, bsn])
}

model PayrollRecord {
  id                String   @id @default(cuid())
  employeeId        String
  companyId         String
  payPeriodStart    DateTime
  payPeriodEnd      DateTime
  processedDate     DateTime @default(now())
  
  // Basic pay information
  baseSalary        Float
  hoursWorked       Float    @default(0)
  overtimeHours     Float    @default(0)
  overtimeRate      Float    @default(1.5)
  
  // Gross pay calculations
  regularPay        Float
  overtimePay       Float
  holidayAllowance  Float    @default(0) // Vakantiegeld
  grossPay          Float
  
  // Tax deductions
  incomeTax         Float
  aowContribution   Float    // AOW (State pension)
  wlzContribution   Float    // WLZ (Long-term care)
  wwContribution    Float    // WW (Unemployment insurance)
  wiaContribution   Float    // WIA (Disability insurance)
  totalDeductions   Float
  
  // Net pay
  netPay            Float
  
  // Employer costs
  employerCosts     Float    @default(0) // Total employer contributions
  
  // Additional information
  taxTable          String   // "wit" or "groen"
  taxYear           Int
  payslipGenerated  Boolean  @default(false)
  notes             String?
  
  employee          Employee @relation(fields: [employeeId], references: [id])
  company           Company  @relation(fields: [companyId], references: [id])
  approval          PayrollApproval?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TaxSettings {
  id                    String   @id @default(cuid())
  companyId             String
  taxYear               Int
  
  // Income tax brackets
  incomeTaxRate1        Float    @default(36.93) // First bracket rate
  incomeTaxRate2        Float    @default(49.50) // Second bracket rate
  incomeTaxBracket1Max  Float    @default(75518) // Maximum for first bracket
  
  // Social security rates
  aowRate               Float    @default(17.90) // AOW rate
  wlzRate               Float    @default(9.65)  // WLZ rate
  wwRate                Float    @default(2.70)  // WW rate
  wiaRate               Float    @default(0.60)  // WIA rate
  
  // Maximum contribution bases
  aowMaxBase            Float    @default(40000)  // AOW maximum base
  wlzMaxBase            Float    @default(40000)  // WLZ maximum base
  wwMaxBase             Float    @default(69000)  // WW maximum base
  wiaMaxBase            Float    @default(69000)  // WIA maximum base
  
  // Other settings
  holidayAllowanceRate  Float    @default(8.0)   // Holiday allowance percentage
  minimumWage           Float    @default(12.83) // Minimum wage per hour
  
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  company               Company  @relation(fields: [companyId], references: [id])
  
  @@unique([companyId, taxYear])
}


// Multi-tenancy and Subscription Models

model Plan {
  id               String   @id @default(cuid())
  name             String   // "Starter", "Professional", "Enterprise"
  stripeProductId  String?  // Stripe product ID
  stripePriceId    String?  // Stripe price ID
  maxEmployees     Int?     // null = unlimited
  maxPayrolls      Int?     // null = unlimited
  features         Json     // Feature flags as JSON
  price            Float    // Monthly price in cents
  currency         String   @default("EUR")
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  subscriptions Subscription[]
}

model Subscription {
  id                 String   @id @default(cuid())
  companyId          String   @unique
  planId             String?  // Allow null for trial subscriptions
  status             String   // active, canceled, past_due, trialing, trial_expired, etc.
  stripeSubscriptionId String? // Stripe subscription ID
  stripeCustomerId   String?  // Stripe customer ID
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  
  // Enhanced trial tracking
  trialStart        DateTime? // When trial started
  trialEnd          DateTime? // When trial ends
  isTrialActive     Boolean   @default(false) // Whether currently in trial
  trialDaysUsed     Int       @default(0) // Days of trial used
  trialExtensions   Int       @default(0) // Number of trial extensions granted
  
  // Conversion tracking
  convertedFromTrial Boolean  @default(false) // Whether this was converted from trial
  trialConvertedAt   DateTime? // When trial was converted to paid
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  company           Company @relation(fields: [companyId], references: [id])
  plan              Plan?   @relation(fields: [planId], references: [id])
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String   // "owner", "admin", "hr", "accountant", "employee"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId])
}

model TenantConfig {
  id            String   @id @default(cuid())
  companyId     String   @unique
  settings      Json     @default("{}")  // Tenant-specific settings
  limits        Json     @default("{}")  // Usage limits
  features      Json     @default("{}")  // Enabled features
  customization Json     @default("{}")  // UI customization
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}



// Payroll Approval Workflow Models

model PayrollApproval {
  id                String   @id @default(cuid())
  payrollRecordId   String   @unique
  companyId         String
  
  // Workflow status
  status            String   // draft, pending, approved, rejected, finalized, paid, cancelled
  
  // Workflow participants
  submittedBy       String
  submittedAt       DateTime
  reviewedBy        String?
  reviewedAt        DateTime?
  approvedBy        String?
  approvedAt        DateTime?
  finalizedBy       String?
  finalizedAt       DateTime?
  
  // Comments and reasons
  comments          String?
  rejectionReason   String?
  
  // Relations
  payrollRecord     PayrollRecord @relation(fields: [payrollRecordId], references: [id], onDelete: Cascade)
  company           Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  submittedByUser   User          @relation("PayrollApprovalSubmittedBy", fields: [submittedBy], references: [id])
  reviewedByUser    User?         @relation("PayrollApprovalReviewedBy", fields: [reviewedBy], references: [id])
  approvedByUser    User?         @relation("PayrollApprovalApprovedBy", fields: [approvedBy], references: [id])
  finalizedByUser   User?         @relation("PayrollApprovalFinalizedBy", fields: [finalizedBy], references: [id])
  history           PayrollApprovalHistory[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model PayrollApprovalHistory {
  id                  String   @id @default(cuid())
  payrollApprovalId   String
  
  // Action details
  action              String   // submit, approve, reject, finalize, cancel
  performedBy         String
  performedAt         DateTime
  comments            String?
  
  // Status transition
  previousStatus      String
  newStatus           String
  
  // Relations
  payrollApproval     PayrollApproval @relation(fields: [payrollApprovalId], references: [id], onDelete: Cascade)
  performedByUser     User            @relation(fields: [performedBy], references: [id])
  
  createdAt           DateTime @default(now())
}



// Employee Allowances and Deductions Models

model EmployeeAllowance {
  id          String   @id @default(cuid())
  employeeId  String
  companyId   String
  
  // Allowance details
  type        String   // "car", "phone", "internet", "travel", "meal", "clothing", "other"
  name        String   // Human readable name
  description String?  // Optional description
  
  // Amount configuration
  amount      Float    // Monthly allowance amount
  currency    String   @default("EUR")
  taxable     Boolean  @default(true) // Whether this allowance is taxable
  
  // Validity period
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([employeeId])
  @@index([companyId])
}

model EmployeeDeduction {
  id          String   @id @default(cuid())
  employeeId  String
  companyId   String
  
  // Deduction details
  type        String   // "pension", "union", "insurance", "loan", "garnishment", "other"
  name        String   // Human readable name
  description String?  // Optional description
  
  // Amount configuration
  amount      Float    // Monthly deduction amount
  currency    String   @default("EUR")
  isPercentage Boolean @default(false) // Whether amount is a percentage of salary
  maxAmount   Float?   // Maximum deduction amount (for percentage-based)
  
  // Validity period
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)
  
  // Relations
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([employeeId])
  @@index([companyId])
}

