generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("AUTH_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String        @id @default(cuid())
  name                    String?
  email                   String        @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String        @default("admin")
  companyId               String?
  emailVerificationToken  String?       @unique
  passwordResetToken      String?       @unique
  passwordResetExpires    DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  Account                 Account[]
  Session                 Session[]
  Company                 Company?      @relation(fields: [companyId], references: [id])
  UserCompany             UserCompany[]
  CompanyJoinRequest      CompanyJoinRequest[]
}

model Company {
  id            String          @id @default(cuid())
  name          String
  address       String?
  city          String?
  postalCode    String?
  country       String          @default("Netherlands")
  phone         String?
  email         String?
  website       String?
  kvkNumber     String?
  taxNumber     String?
  vatNumber     String?
  rsin          String?         // Rechtspersonen en Samenwerkingsverbanden Informatienummer
  loonheffingennummer String?   // Payroll Tax Number
  taxNumbersVerified Boolean   @default(false) // Flag for manual verification status
  bankAccount   String?
  contactEmail  String?
  contactPhone  String?
  description   String?
  industry      String?
  foundedYear   Int?
  employeeCount Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User[]
  UserCompany   UserCompany[]
  Subscription  Subscription?
  TenantConfig  TenantConfig?
  CompanyPoints CompanyPoints?
  PortalAccessBilling PortalAccessBilling[]
  PortalAccessQuota   PortalAccessQuota?
  CompanyJoinRequest  CompanyJoinRequest[]
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Plan {
  id              String         @id @default(cuid())
  name            String
  stripePriceId   String?
  maxEmployees    Int?
  maxPayrolls     Int?
  features        Json
  price           Float
  currency        String         @default("EUR")
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  stripeProductId String?
  Subscription    Subscription[]
}

model Subscription {
  id                   String    @id @default(cuid())
  companyId            String    @unique
  planId               String
  status               String
  stripeSubscriptionId String?
  stripeCustomerId     String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  trialEnd             DateTime?
  isTrialActive        Boolean   @default(false)
  trialStart           DateTime?
  trialExtensions      Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  Company              Company   @relation(fields: [companyId], references: [id])
  Plan                 Plan      @relation(fields: [planId], references: [id])
}

model TenantConfig {
  id            String   @id @default(cuid())
  companyId     String   @unique
  settings      Json     @default("{}")
  limits        Json     @default("{}")
  features      Json     @default("{}")
  customization Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// Points system for Enterprise users
model CompanyPoints {
  id              String   @id @default(cuid())
  companyId       String   @unique
  pointsBalance   Int      @default(0)  // Current points balance
  totalPurchased  Int      @default(0)  // Total points ever purchased
  totalUsed       Int      @default(0)  // Total points ever used
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  PointsTransaction PointsTransaction[]
}

model PointsTransaction {
  id              String        @id @default(cuid())
  companyPointsId String
  type            String        // 'purchase', 'usage', 'refund'
  amount          Int           // Points amount (positive for purchase/refund, negative for usage)
  description     String?       // Description of the transaction
  payrollRunId    String?       // Reference to payroll run if used for payroll
  stripePaymentId String?       // Stripe payment ID for purchases
  createdAt       DateTime      @default(now())
  CompanyPoints   CompanyPoints @relation(fields: [companyPointsId], references: [id], onDelete: Cascade)
}

model PointsPackage {
  id          String   @id @default(cuid())
  name        String   // e.g., "10 Payroll Credits", "50 Payroll Credits"
  points      Int      // Number of points in this package
  price       Float    // Price in cents (e.g., 3000 for €30.00)
  currency    String   @default("EUR")
  stripePriceId String? // Stripe price ID for this package
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}



// Portal Access Billing Models
model PortalAccessBilling {
  id              String   @id @default(cuid())
  companyId       String
  employeeId      String   // Reference to HR database employee
  status          String   // 'pending', 'active', 'cancelled', 'suspended'
  startDate       DateTime
  endDate         DateTime?
  monthlyRate     Float    @default(5.00) // €5 per month
  currency        String   @default("EUR")
  billingCycle    String   @default("monthly") // 'monthly', 'annual'
  
  // Invitation tracking
  invitationSentAt DateTime?
  invitationAcceptedAt DateTime?
  lastBilledAt    DateTime?
  nextBillingDate DateTime?
  
  // Billing details
  totalBilled     Float    @default(0)
  totalPaid       Float    @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  Company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  BillingTransactions PortalBillingTransaction[]
  
  @@unique([companyId, employeeId])
  @@index([companyId, status])
  @@index([nextBillingDate])
}

model PortalBillingTransaction {
  id                    String   @id @default(cuid())
  portalAccessBillingId String
  type                  String   // 'charge', 'refund', 'credit'
  amount                Float
  currency              String   @default("EUR")
  description           String?
  billingPeriodStart    DateTime
  billingPeriodEnd      DateTime
  
  // Payment processing
  stripeInvoiceId       String?
  stripePaymentId       String?
  paymentStatus         String   @default("pending") // 'pending', 'paid', 'failed', 'refunded'
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  PortalAccessBilling   PortalAccessBilling @relation(fields: [portalAccessBillingId], references: [id], onDelete: Cascade)
  
  @@index([paymentStatus])
  @@index([billingPeriodStart, billingPeriodEnd])
}

model PortalAccessQuota {
  id                    String   @id @default(cuid())
  companyId             String   @unique
  maxPortalUsers        Int      @default(5)  // Based on subscription plan
  currentActiveUsers    Int      @default(0)
  currentPendingUsers   Int      @default(0)  // Invited but not yet accepted
  
  // Usage tracking
  totalInvitationsSent  Int      @default(0)
  totalAcceptances      Int      @default(0)
  totalCancellations    Int      @default(0)
  
  // Billing summary
  monthlyRevenue        Float    @default(0)
  totalRevenue          Float    @default(0)
  
  lastUpdated           DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  Company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([companyId])
}


// Company Join Request Model for handling user requests to join existing companies
model CompanyJoinRequest {
  id              String   @id @default(cuid())
  userId          String
  companyId       String
  status          String   @default("pending") // 'pending', 'approved', 'rejected'
  requestMessage  String?
  
  // Approval/Rejection details
  reviewedBy      String?  // User ID of the admin who reviewed
  reviewedAt      DateTime?
  rejectionReason String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  User            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId]) // Prevent duplicate requests from same user to same company
  @@index([companyId, status])
  @@index([status])
}

