generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/auth-client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("AUTH_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String        @id @default(cuid())
  name                    String?
  email                   String        @unique
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    String        @default("admin")
  companyId               String?
  emailVerificationToken  String?       @unique
  passwordResetToken      String?       @unique
  passwordResetExpires    DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  Account                 Account[]
  Session                 Session[]
  Company                 Company?      @relation(fields: [companyId], references: [id])
  UserCompany             UserCompany[]
}

model Company {
  id            String          @id @default(cuid())
  name          String
  address       String?
  city          String?
  postalCode    String?
  country       String          @default("Netherlands")
  phone         String?
  email         String?
  website       String?
  kvkNumber     String?
  taxNumber     String?
  vatNumber     String?
  bankAccount   String?
  contactEmail  String?
  contactPhone  String?
  description   String?
  industry      String?
  foundedYear   Int?
  employeeCount Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User[]
  UserCompany   UserCompany[]
  Subscription  Subscription?
  TenantConfig  TenantConfig?
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
}

model Plan {
  id              String         @id @default(cuid())
  name            String
  stripePriceId   String?
  maxEmployees    Int?
  maxPayrolls     Int?
  features        Json
  price           Float
  currency        String         @default("EUR")
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  stripeProductId String?
  Subscription    Subscription[]
}

model Subscription {
  id                   String    @id @default(cuid())
  companyId            String    @unique
  planId               String
  status               String
  stripeSubscriptionId String?
  stripeCustomerId     String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean   @default(false)
  trialEnd             DateTime?
  isTrialActive        Boolean   @default(false)
  trialStart           DateTime?
  trialExtensions      Int       @default(0)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  Company              Company   @relation(fields: [companyId], references: [id])
  Plan                 Plan      @relation(fields: [planId], references: [id])
}

model TenantConfig {
  id            String   @id @default(cuid())
  companyId     String   @unique
  settings      Json     @default("{}")
  limits        Json     @default("{}")
  features      Json     @default("{}")
  customization Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

